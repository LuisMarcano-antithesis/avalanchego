# Changes to the minimum golang version must also be replicated in
# scripts/build_avalanche.sh
# Dockerfile (here)
# README.md
# go.mod
# ============= Compilation Stage ================

# Antithesis: Getting the Antithesis golang instrumentation library
FROM docker.io/antithesishq/go-instrumentor AS instrumentor

FROM golang:1.21.7-bullseye AS builder

# RUN pwd
# RUN ls -lah

# RUN mkdir -p /build
WORKDIR /build
# Copy and download avalanche dependencies using go mod
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy the code into the container
COPY . .

RUN ls -lah
RUN pwd

RUN git rev-parse HEAD > ./commit_hash.txt

# Antithesis: copy the instrumentor and supporting files to their correct locations.
COPY --from=instrumentor /opt/antithesis /opt/antithesis
COPY --from=instrumentor /opt/antithesis/lib /lib

# Antithesis: Create the destination output directory for the instrumented code.
RUN mkdir -p /app_instrumented

#Park the .git file in a safe location
RUN mkdir -p /opt/tmp/ 
RUN cp -r .git /opt/tmp/

# Antithesis: instrument
RUN /opt/antithesis/bin/goinstrumentor \
    -stderrthreshold=INFO \
    -antithesis /opt/antithesis/instrumentation \
    . \
    /app_instrumented

WORKDIR /app_instrumented/customer
RUN go mod download
RUN ln -s /opt/tmp/.git .git

# Build avalanchego
ARG RACE_FLAG
RUN ./scripts/build.sh ${RACE_FLAG}

# ============= Cleanup Stage ================
FROM debian:11-slim AS execution

# Maintain compatibility with previous images
RUN mkdir -p /avalanchego/build
RUN mkdir -p /avalanchego/symbols
WORKDIR /avalanchego/build

# Copy the executables into the container
COPY --from=builder /app_instrumented/customer/build/ .
COPY --from=builder /app_instrumented/symbols /avalanchego/symbols
COPY --from=builder /opt/antithesis/lib/libvoidstar.so /usr/lib/libvoidstar.so
COPY --from=builder /build/commit_hash.txt ./commit_hash.txt

CMD [ "./avalanchego" ]
